name: Build and Deploy to AKS

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AKS_CLUSTER_NAME: your-aks-cluster-name
  AKS_RESOURCE_GROUP: your-resource-group
  NAMESPACE: default

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go mod tidy || echo "No go.mod found, using legacy dependency management"
        go get -u -v github.com/astaxie/beego
        go get -u -v github.com/beego/bee
        go get -d github.com/Microsoft/ApplicationInsights-Go/appinsights
        go get -u -v gopkg.in/mgo.v2
        go get -u -v github.com/streadway/amqp
        go get -u -v pack.ag/amqp
        go get gopkg.in/matryer/try.v1

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./... || echo "No tests found"

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    environment: production
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create image pull secret
      run: |
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=${{ env.REGISTRY }} \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --docker-email=${{ github.actor }}@users.noreply.github.com \
          --namespace ${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Update deployment manifests
      run: |
        # Extract the image tag from the build step
        IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | head -n1)
        
        # Update the deployment.yaml with the new image
        sed -i "s|image:.*|image: ${IMAGE_TAG}|g" manifests/deployment.yaml
        
        # Add imagePullSecrets if not present
        if ! grep -q "imagePullSecrets" manifests/deployment.yaml; then
          sed -i '/containers:/i\      imagePullSecrets:\n      - name: ghcr-secret' manifests/deployment.yaml
        fi

    - name: Deploy to AKS
      run: |
        kubectl apply -f manifests/ --namespace ${{ env.NAMESPACE }}

    - name: Wait for deployment to be ready
      run: |
        kubectl rollout status deployment/captureorderfd --namespace ${{ env.NAMESPACE }} --timeout=300s

    - name: Get service information
      run: |
        echo "=== Services ==="
        kubectl get services --namespace ${{ env.NAMESPACE }}
        echo "=== Pods ==="
        kubectl get pods --namespace ${{ env.NAMESPACE }}
        echo "=== Deployment Status ==="
        kubectl get deployments --namespace ${{ env.NAMESPACE }}

  # Alternative deployment job for Docker Hub (uncomment if needed)
  # deploy-dockerhub:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
  #   
  #   - name: Build and push to Docker Hub
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ secrets.DOCKERHUB_USERNAME }}/aksdemo:latest
